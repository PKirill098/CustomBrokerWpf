<Application x:Class="KirillPolyanskiy.CustomBrokerWpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:my="clr-namespace:KirillPolyanskiy.CustomBrokerWpf"
             xmlns:conv="clr-namespace:KirillPolyanskiy.BindingConverters;assembly=DataModelClassLibrary"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             DispatcherUnhandledException="Application_DispatcherUnhandledException" Startup="Application_Startup" ShutdownMode="OnExplicitShutdown">
    <Application.Resources>
        <my:ReferenceDS x:Key="keyReferenceDS"/>
        <my:VisibilityfromUserRole x:Key="keyVisibilityfromUserRole"/>
        <my:VisibilityAdmins x:Key="keyVisibilityAdmins"/>
        <my:VisibilityManagers x:Key="keyVisibilityManagers"/>
        <my:VisibilityAccounts x:Key="keyVisibilityAccounts"/>
        <my:VisibilityAccountVisors x:Key="keyVisibilityAccountVisors"/>
        <my:VisibilityTopManagers x:Key="keyVisibilityTopManagers"/>
        <my:VisibilityLManagers x:Key="keyVisibilityLManagers"/>
        <my:VisibilityManagersLManagers x:Key="keyVisibilityManagersLManagers"/>
        <my:VisibilityLAccounts x:Key="keyVisibilityLAccounts"/>
        <my:VisibilityAccountsLAccounts x:Key="keyVisibilityAccountsLAccounts"/>
        <my:VisibilityAlgorithmWriters x:Key="keyVisibilityAlgorithmWriters"/>
        <conv:NoDisplayNewId x:Key="keyNoDisplayNewId"/>
        <conv:NoNullValueBackConverter x:Key="keyNotNullConverter"/>
        <Style TargetType="Window">
            <Setter Property="FontSize" Value="11"/>
        </Style>
        <Style x:Key="ErrorStyle" TargetType="{x:Type FrameworkElement}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
		<Style x:Key="TextBlockLabel" TargetType="TextBlock">
			<Setter Property="TextAlignment" Value="Right"/>
			<Setter Property="Margin" Value="2,0,2,0" />
			<Setter Property="VerticalAlignment" Value="Center"/>
		</Style>
        <Style x:Key="StyleTextBlockAlignmentCenter" TargetType="{x:Type TextBlock}">
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
        <Style x:Key="StyleTextBoxAlignmentCenter" TargetType="{x:Type TextBox}">
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0,-1,0,-2" />
        </Style>
        <Style x:Key="StyleTextBlockAlignmentCenterErr" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ErrorStyle}">
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
        <Style x:Key="StyleTextBoxAlignmentCenterErr" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ErrorStyle}">
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0,-1,0,-2" />
        </Style>
        <Style x:Key="StyleTextBlockAlignmentRight" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ErrorStyle}">
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="Margin" Value="2,0,2,0" />
        </Style>
        <Style x:Key="StyleTextBoxAlignmentRight" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ErrorStyle}">
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="Padding" Value="0,-1,0,-2" />
        </Style>
        <Style x:Key="StyleTextBlockAlignmentRightTotal" TargetType="TextBlock" BasedOn="{StaticResource StyleTextBlockAlignmentRight}">
            <Setter Property="Padding" Value="0,0,4,0"/>
        </Style>
        <Style x:Key="StyleTextBoxAlignmentRightTotal" TargetType="TextBox" BasedOn="{StaticResource StyleTextBoxAlignmentRight}">
            <Setter Property="Padding" Value="0,-1,4,-2"/>
        </Style>
        <Style x:Key="CheckBoxListStyle" TargetType="{x:Type ListBox}">
            <Setter Property="SelectionMode" Value="Multiple"/>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Margin" Value="2"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                                    <CheckBox Focusable="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False">
                                        <ContentPresenter />
                                    </CheckBox>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <EventSetter Event="SelectionChanged" Handler="ListBoxCheckBox_SelectionChanged"/>
        </Style>
        <Style x:Key="StyleTextBlockWrap" TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>
        <Style x:Key="StyleTextBoxWrap" TargetType="TextBox">
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="AcceptsReturn" Value="True"/>
        </Style>
        <Style x:Key="ComboBoxButtonLess" TargetType="{x:Type ComboBox}"
                                xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="DataGridRowStyleDefault" TargetType="{x:Type DataGridRow}">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="False">
                    <Setter Property="Background" Value="#e0f7e3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding}" FontWeight="Bold" Padding="4,0" />
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="DataGrid">
            <Setter Property="AlternatingRowBackground" Value="WhiteSmoke"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="EnableRowVirtualization" Value="True"/>
            <Setter Property="HorizontalGridLinesBrush" Value="RoyalBlue"/>
            <Setter Property="RowHeaderWidth" Value="15"/>
            <Setter Property="VerticalGridLinesBrush" Value="RoyalBlue"/>
			<!--<Setter Property="CellStyle">
				<Setter.Value>
					<Style TargetType="DataGridCell">
						<Style.Triggers>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Validation.HasError)}" Value="True">
								<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Validation.Errors)/ErrorContent}"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Setter.Value>
			</Setter>-->
            <Setter Property="ColumnHeaderStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" FontWeight="Bold" Padding="4,0" />
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
			<Setter Property="RowHeaderStyle">
				<Setter.Value>
					<Style TargetType="DataGridRowHeader">
						<Setter Property="Width" Value="20"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError)}" Value="True">
								<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)/ErrorContent}"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</Setter.Value>
			</Setter>
            <Setter Property="RowStyle" Value="{StaticResource DataGridRowStyleDefault}"/>
            <Setter Property="ContextMenu">
				<Setter.Value>
					<ContextMenu FocusManager.IsFocusScope="True">
						<MenuItem Command="ApplicationCommands.Copy" Header="Копировать" Height="22">
							<MenuItem.Icon>
								<Image Source="/CustomBrokerWpf;component/Images/copy.png" />
							</MenuItem.Icon>
						</MenuItem>
					</ContextMenu>
				</Setter.Value>
			</Setter>
        </Style>
        <Style TargetType="ToolBar">
            <Setter Property="Height" Value="30"/>
        </Style>
        <ContextMenu x:Key="DataGridCellContextMenu" FocusManager.IsFocusScope="True">
            <MenuItem Command="ApplicationCommands.Copy" Header="Копировать" Height="22">
                <MenuItem.Icon>
                    <Image Source="/CustomBrokerWpf;component/Images/copy.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="ApplicationCommands.Paste" Header="Вставить" Height="22">
                <MenuItem.Icon>
                    <Image Source="/CustomBrokerWpf;component/Images/paste.png" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
    </Application.Resources>
    <!--<Application.MainWindow>
        <my:MainWindow Visibility="Visible"/>
    </Application.MainWindow>-->
</Application>
